// Code generated by from events definition. DO NOT EDIT.
package events

import (
    "context"
    "fmt"
    "strings"
    "time"
    "github.com/openshift/assisted-service/internal/events"

    "github.com/go-openapi/strfmt"
)

//
// Event generic_cluster
//
type GenericClusterEvent struct {
    ClusterId strfmt.UUID
    Message string
    Severity string
}

var GenericClusterEventName string = "generic_cluster"

func NewGenericClusterEvent(
    clusterId strfmt.UUID,
    message string,
    severity string,
) *GenericClusterEvent {
    return &GenericClusterEvent{
        ClusterId: clusterId,
        Message: message,
        Severity: severity,
    }
}

func SendGenericClusterEvent(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    message string,
    severity string,) {
    ev := NewGenericClusterEvent(
        clusterId,
        message,
        severity,
    )
    eventsHandler.SendClusterEvent(ctx, ev)
}

func SendGenericClusterEventAtTime(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    message string,
    severity string,
    eventTime time.Time) {
    ev := NewGenericClusterEvent(
        clusterId,
        message,
        severity,
    )
    eventsHandler.SendClusterEventAtTime(ctx, ev, eventTime)
}

func (e *GenericClusterEvent) GetName() string {
    return "generic_cluster"
}

func (e *GenericClusterEvent) GetSeverity() string {
    return e.Severity
}

func (e *GenericClusterEvent) GetClusterId() strfmt.UUID {
    return e.ClusterId
}

func (e *GenericClusterEvent) format(message *string) string {
    r := strings.NewReplacer(
        "{cluster_id}", fmt.Sprint(e.ClusterId),
        "{message}", fmt.Sprint(e.Message),
        "{severity}", fmt.Sprint(e.Severity),
    )
    return r.Replace(*message)
}

func (e *GenericClusterEvent) FormatMessage() string {
    s := "{message}"
    return e.format(&s)
}

//
// Event generic_host
//
type GenericHostEvent struct {
    ClusterId strfmt.UUID
    HostId strfmt.UUID
    Message string
    Severity string
}

var GenericHostEventName string = "generic_host"

func NewGenericHostEvent(
    clusterId strfmt.UUID,
    hostId strfmt.UUID,
    message string,
    severity string,
) *GenericHostEvent {
    return &GenericHostEvent{
        ClusterId: clusterId,
        HostId: hostId,
        Message: message,
        Severity: severity,
    }
}

func SendGenericHostEvent(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    hostId strfmt.UUID,
    message string,
    severity string,) {
    ev := NewGenericHostEvent(
        clusterId,
        hostId,
        message,
        severity,
    )
    eventsHandler.SendHostEvent(ctx, ev)
}

func SendGenericHostEventAtTime(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    hostId strfmt.UUID,
    message string,
    severity string,
    eventTime time.Time) {
    ev := NewGenericHostEvent(
        clusterId,
        hostId,
        message,
        severity,
    )
    eventsHandler.SendHostEventAtTime(ctx, ev, eventTime)
}

func (e *GenericHostEvent) GetName() string {
    return "generic_host"
}

func (e *GenericHostEvent) GetSeverity() string {
    return e.Severity
}

func (e *GenericHostEvent) GetClusterId() strfmt.UUID {
    return e.ClusterId
}
func (e *GenericHostEvent) GetHostId() strfmt.UUID {
    return e.HostId
}

func (e *GenericHostEvent) format(message *string) string {
    r := strings.NewReplacer(
        "{cluster_id}", fmt.Sprint(e.ClusterId),
        "{host_id}", fmt.Sprint(e.HostId),
        "{message}", fmt.Sprint(e.Message),
        "{severity}", fmt.Sprint(e.Severity),
    )
    return r.Replace(*message)
}

func (e *GenericHostEvent) FormatMessage() string {
    s := "{message}"
    return e.format(&s)
}

//
// Event cancel_install_failed_start
//
type CancelInstallFailedStartEvent struct {
    ClusterId strfmt.UUID
}

var CancelInstallFailedStartEventName string = "cancel_install_failed_start"

func NewCancelInstallFailedStartEvent(
    clusterId strfmt.UUID,
) *CancelInstallFailedStartEvent {
    return &CancelInstallFailedStartEvent{
        ClusterId: clusterId,
    }
}

func SendCancelInstallFailedStartEvent(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,) {
    ev := NewCancelInstallFailedStartEvent(
        clusterId,
    )
    eventsHandler.SendClusterEvent(ctx, ev)
}

func SendCancelInstallFailedStartEventAtTime(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    eventTime time.Time) {
    ev := NewCancelInstallFailedStartEvent(
        clusterId,
    )
    eventsHandler.SendClusterEventAtTime(ctx, ev, eventTime)
}

func (e *CancelInstallFailedStartEvent) GetName() string {
    return "cancel_install_failed_start"
}

func (e *CancelInstallFailedStartEvent) GetSeverity() string {
    return "error"
}

func (e *CancelInstallFailedStartEvent) GetClusterId() strfmt.UUID {
    return e.ClusterId
}

func (e *CancelInstallFailedStartEvent) format(message *string) string {
    r := strings.NewReplacer(
        "{cluster_id}", fmt.Sprint(e.ClusterId),
    )
    return r.Replace(*message)
}

func (e *CancelInstallFailedStartEvent) FormatMessage() string {
    s := "Failed to cancel installation: error starting DB transaction"
    return e.format(&s)
}

//
// Event cancel_install_failed_commit
//
type CancelInstallFailedCommitEvent struct {
    ClusterId strfmt.UUID
}

var CancelInstallFailedCommitEventName string = "cancel_install_failed_commit"

func NewCancelInstallFailedCommitEvent(
    clusterId strfmt.UUID,
) *CancelInstallFailedCommitEvent {
    return &CancelInstallFailedCommitEvent{
        ClusterId: clusterId,
    }
}

func SendCancelInstallFailedCommitEvent(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,) {
    ev := NewCancelInstallFailedCommitEvent(
        clusterId,
    )
    eventsHandler.SendClusterEvent(ctx, ev)
}

func SendCancelInstallFailedCommitEventAtTime(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    eventTime time.Time) {
    ev := NewCancelInstallFailedCommitEvent(
        clusterId,
    )
    eventsHandler.SendClusterEventAtTime(ctx, ev, eventTime)
}

func (e *CancelInstallFailedCommitEvent) GetName() string {
    return "cancel_install_failed_commit"
}

func (e *CancelInstallFailedCommitEvent) GetSeverity() string {
    return "error"
}

func (e *CancelInstallFailedCommitEvent) GetClusterId() strfmt.UUID {
    return e.ClusterId
}

func (e *CancelInstallFailedCommitEvent) format(message *string) string {
    r := strings.NewReplacer(
        "{cluster_id}", fmt.Sprint(e.ClusterId),
    )
    return r.Replace(*message)
}

func (e *CancelInstallFailedCommitEvent) FormatMessage() string {
    s := "Failed to cancel installation: error committing DB transaction"
    return e.format(&s)
}

//
// Event host_registration_failed_setting_properties
//
type HostRegistrationFailedSettingPropertiesEvent struct {
    ClusterId strfmt.UUID
    HostId strfmt.UUID
}

var HostRegistrationFailedSettingPropertiesEventName string = "host_registration_failed_setting_properties"

func NewHostRegistrationFailedSettingPropertiesEvent(
    clusterId strfmt.UUID,
    hostId strfmt.UUID,
) *HostRegistrationFailedSettingPropertiesEvent {
    return &HostRegistrationFailedSettingPropertiesEvent{
        ClusterId: clusterId,
        HostId: hostId,
    }
}

func SendHostRegistrationFailedSettingPropertiesEvent(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    hostId strfmt.UUID,) {
    ev := NewHostRegistrationFailedSettingPropertiesEvent(
        clusterId,
        hostId,
    )
    eventsHandler.SendHostEvent(ctx, ev)
}

func SendHostRegistrationFailedSettingPropertiesEventAtTime(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    hostId strfmt.UUID,
    eventTime time.Time) {
    ev := NewHostRegistrationFailedSettingPropertiesEvent(
        clusterId,
        hostId,
    )
    eventsHandler.SendHostEventAtTime(ctx, ev, eventTime)
}

func (e *HostRegistrationFailedSettingPropertiesEvent) GetName() string {
    return "host_registration_failed_setting_properties"
}

func (e *HostRegistrationFailedSettingPropertiesEvent) GetSeverity() string {
    return "error"
}

func (e *HostRegistrationFailedSettingPropertiesEvent) GetClusterId() strfmt.UUID {
    return e.ClusterId
}
func (e *HostRegistrationFailedSettingPropertiesEvent) GetHostId() strfmt.UUID {
    return e.HostId
}

func (e *HostRegistrationFailedSettingPropertiesEvent) format(message *string) string {
    r := strings.NewReplacer(
        "{cluster_id}", fmt.Sprint(e.ClusterId),
        "{host_id}", fmt.Sprint(e.HostId),
    )
    return r.Replace(*message)
}

func (e *HostRegistrationFailedSettingPropertiesEvent) FormatMessage() string {
    s := "Failed to register host: error setting host properties"
    return e.format(&s)
}

//
// Event cluster_registration_failed
//
type ClusterRegistrationFailedEvent struct {
    ClusterId strfmt.UUID
    ClusterName string
    Error string
    ClusterKind string
}

var ClusterRegistrationFailedEventName string = "cluster_registration_failed"

func NewClusterRegistrationFailedEvent(
    clusterId strfmt.UUID,
    clusterName string,
    error string,
    clusterKind string,
) *ClusterRegistrationFailedEvent {
    return &ClusterRegistrationFailedEvent{
        ClusterId: clusterId,
        ClusterName: clusterName,
        Error: error,
        ClusterKind: clusterKind,
    }
}

func SendClusterRegistrationFailedEvent(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    clusterName string,
    error string,
    clusterKind string,) {
    ev := NewClusterRegistrationFailedEvent(
        clusterId,
        clusterName,
        error,
        clusterKind,
    )
    eventsHandler.SendClusterEvent(ctx, ev)
}

func SendClusterRegistrationFailedEventAtTime(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    clusterName string,
    error string,
    clusterKind string,
    eventTime time.Time) {
    ev := NewClusterRegistrationFailedEvent(
        clusterId,
        clusterName,
        error,
        clusterKind,
    )
    eventsHandler.SendClusterEventAtTime(ctx, ev, eventTime)
}

func (e *ClusterRegistrationFailedEvent) GetName() string {
    return "cluster_registration_failed"
}

func (e *ClusterRegistrationFailedEvent) GetSeverity() string {
    return "error"
}

func (e *ClusterRegistrationFailedEvent) GetClusterId() strfmt.UUID {
    return e.ClusterId
}

func (e *ClusterRegistrationFailedEvent) format(message *string) string {
    r := strings.NewReplacer(
        "{cluster_id}", fmt.Sprint(e.ClusterId),
        "{cluster_name}", fmt.Sprint(e.ClusterName),
        "{error}", fmt.Sprint(e.Error),
        "{cluster_kind}", fmt.Sprint(e.ClusterKind),
    )
    return r.Replace(*message)
}

func (e *ClusterRegistrationFailedEvent) FormatMessage() string {
    s := "Failed to register cluster with name '{cluster_name}'. Error: {error}"
    return e.format(&s)
}

//
// Event registered_cluster
//
type RegisteredClusterEvent struct {
    ClusterId strfmt.UUID
    ClusterName string
    ClusterKind string
}

var RegisteredClusterEventName string = "registered_cluster"

func NewRegisteredClusterEvent(
    clusterId strfmt.UUID,
    clusterName string,
    clusterKind string,
) *RegisteredClusterEvent {
    return &RegisteredClusterEvent{
        ClusterId: clusterId,
        ClusterName: clusterName,
        ClusterKind: clusterKind,
    }
}

func SendRegisteredClusterEvent(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    clusterName string,
    clusterKind string,) {
    ev := NewRegisteredClusterEvent(
        clusterId,
        clusterName,
        clusterKind,
    )
    eventsHandler.SendClusterEvent(ctx, ev)
}

func SendRegisteredClusterEventAtTime(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    clusterName string,
    clusterKind string,
    eventTime time.Time) {
    ev := NewRegisteredClusterEvent(
        clusterId,
        clusterName,
        clusterKind,
    )
    eventsHandler.SendClusterEventAtTime(ctx, ev, eventTime)
}

func (e *RegisteredClusterEvent) GetName() string {
    return "registered_cluster"
}

func (e *RegisteredClusterEvent) GetSeverity() string {
    return "info"
}

func (e *RegisteredClusterEvent) GetClusterId() strfmt.UUID {
    return e.ClusterId
}

func (e *RegisteredClusterEvent) format(message *string) string {
    r := strings.NewReplacer(
        "{cluster_id}", fmt.Sprint(e.ClusterId),
        "{cluster_name}", fmt.Sprint(e.ClusterName),
        "{cluster_kind}", fmt.Sprint(e.ClusterKind),
    )
    return r.Replace(*message)
}

func (e *RegisteredClusterEvent) FormatMessage() string {
    s := "Registered cluster {cluster_name}"
    return e.format(&s)
}

//
// Event cluster_deregister_failed
//
type ClusterDeregisterFailedEvent struct {
    ClusterId strfmt.UUID
    Error string
}

var ClusterDeregisterFailedEventName string = "cluster_deregister_failed"

func NewClusterDeregisterFailedEvent(
    clusterId strfmt.UUID,
    error string,
) *ClusterDeregisterFailedEvent {
    return &ClusterDeregisterFailedEvent{
        ClusterId: clusterId,
        Error: error,
    }
}

func SendClusterDeregisterFailedEvent(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    error string,) {
    ev := NewClusterDeregisterFailedEvent(
        clusterId,
        error,
    )
    eventsHandler.SendClusterEvent(ctx, ev)
}

func SendClusterDeregisterFailedEventAtTime(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    error string,
    eventTime time.Time) {
    ev := NewClusterDeregisterFailedEvent(
        clusterId,
        error,
    )
    eventsHandler.SendClusterEventAtTime(ctx, ev, eventTime)
}

func (e *ClusterDeregisterFailedEvent) GetName() string {
    return "cluster_deregister_failed"
}

func (e *ClusterDeregisterFailedEvent) GetSeverity() string {
    return "error"
}

func (e *ClusterDeregisterFailedEvent) GetClusterId() strfmt.UUID {
    return e.ClusterId
}

func (e *ClusterDeregisterFailedEvent) format(message *string) string {
    r := strings.NewReplacer(
        "{cluster_id}", fmt.Sprint(e.ClusterId),
        "{error}", fmt.Sprint(e.Error),
    )
    return r.Replace(*message)
}

func (e *ClusterDeregisterFailedEvent) FormatMessage() string {
    s := "Failed to deregister cluster. Error: {error}"
    return e.format(&s)
}

//
// Event deregistered_cluster
//
type DeregisteredClusterEvent struct {
    ClusterId strfmt.UUID
}

var DeregisteredClusterEventName string = "deregistered_cluster"

func NewDeregisteredClusterEvent(
    clusterId strfmt.UUID,
) *DeregisteredClusterEvent {
    return &DeregisteredClusterEvent{
        ClusterId: clusterId,
    }
}

func SendDeregisteredClusterEvent(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,) {
    ev := NewDeregisteredClusterEvent(
        clusterId,
    )
    eventsHandler.SendClusterEvent(ctx, ev)
}

func SendDeregisteredClusterEventAtTime(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    eventTime time.Time) {
    ev := NewDeregisteredClusterEvent(
        clusterId,
    )
    eventsHandler.SendClusterEventAtTime(ctx, ev, eventTime)
}

func (e *DeregisteredClusterEvent) GetName() string {
    return "deregistered_cluster"
}

func (e *DeregisteredClusterEvent) GetSeverity() string {
    return "info"
}

func (e *DeregisteredClusterEvent) GetClusterId() strfmt.UUID {
    return e.ClusterId
}

func (e *DeregisteredClusterEvent) format(message *string) string {
    r := strings.NewReplacer(
        "{cluster_id}", fmt.Sprint(e.ClusterId),
    )
    return r.Replace(*message)
}

func (e *DeregisteredClusterEvent) FormatMessage() string {
    s := "Deregistered cluster"
    return e.format(&s)
}

//
// Event cluster_validation_falling
//
type ClusterValidationFallingEvent struct {
    ClusterId strfmt.UUID
    ValidationId string
    ValidationMsg string
}

var ClusterValidationFallingEventName string = "cluster_validation_falling"

func NewClusterValidationFallingEvent(
    clusterId strfmt.UUID,
    validationId string,
    validationMsg string,
) *ClusterValidationFallingEvent {
    return &ClusterValidationFallingEvent{
        ClusterId: clusterId,
        ValidationId: validationId,
        ValidationMsg: validationMsg,
    }
}

func SendClusterValidationFallingEvent(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    validationId string,
    validationMsg string,) {
    ev := NewClusterValidationFallingEvent(
        clusterId,
        validationId,
        validationMsg,
    )
    eventsHandler.SendClusterEvent(ctx, ev)
}

func SendClusterValidationFallingEventAtTime(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    validationId string,
    validationMsg string,
    eventTime time.Time) {
    ev := NewClusterValidationFallingEvent(
        clusterId,
        validationId,
        validationMsg,
    )
    eventsHandler.SendClusterEventAtTime(ctx, ev, eventTime)
}

func (e *ClusterValidationFallingEvent) GetName() string {
    return "cluster_validation_falling"
}

func (e *ClusterValidationFallingEvent) GetSeverity() string {
    return "warning"
}

func (e *ClusterValidationFallingEvent) GetClusterId() strfmt.UUID {
    return e.ClusterId
}

func (e *ClusterValidationFallingEvent) format(message *string) string {
    r := strings.NewReplacer(
        "{cluster_id}", fmt.Sprint(e.ClusterId),
        "{validation_id}", fmt.Sprint(e.ValidationId),
        "{validation_msg}", fmt.Sprint(e.ValidationMsg),
    )
    return r.Replace(*message)
}

func (e *ClusterValidationFallingEvent) FormatMessage() string {
    s := "Cluster validation '{validation_id}' that used to succeed is now failing"
    return e.format(&s)
}

//
// Event cluster_validation_fixed
//
type ClusterValidationFixedEvent struct {
    ClusterId strfmt.UUID
    ValidationId string
    ValidationMsg string
}

var ClusterValidationFixedEventName string = "cluster_validation_fixed"

func NewClusterValidationFixedEvent(
    clusterId strfmt.UUID,
    validationId string,
    validationMsg string,
) *ClusterValidationFixedEvent {
    return &ClusterValidationFixedEvent{
        ClusterId: clusterId,
        ValidationId: validationId,
        ValidationMsg: validationMsg,
    }
}

func SendClusterValidationFixedEvent(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    validationId string,
    validationMsg string,) {
    ev := NewClusterValidationFixedEvent(
        clusterId,
        validationId,
        validationMsg,
    )
    eventsHandler.SendClusterEvent(ctx, ev)
}

func SendClusterValidationFixedEventAtTime(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    validationId string,
    validationMsg string,
    eventTime time.Time) {
    ev := NewClusterValidationFixedEvent(
        clusterId,
        validationId,
        validationMsg,
    )
    eventsHandler.SendClusterEventAtTime(ctx, ev, eventTime)
}

func (e *ClusterValidationFixedEvent) GetName() string {
    return "cluster_validation_fixed"
}

func (e *ClusterValidationFixedEvent) GetSeverity() string {
    return "info"
}

func (e *ClusterValidationFixedEvent) GetClusterId() strfmt.UUID {
    return e.ClusterId
}

func (e *ClusterValidationFixedEvent) format(message *string) string {
    r := strings.NewReplacer(
        "{cluster_id}", fmt.Sprint(e.ClusterId),
        "{validation_id}", fmt.Sprint(e.ValidationId),
        "{validation_msg}", fmt.Sprint(e.ValidationMsg),
    )
    return r.Replace(*message)
}

func (e *ClusterValidationFixedEvent) FormatMessage() string {
    s := "Cluster validation '{validation_id}' is now fixed"
    return e.format(&s)
}

//
// Event cluster_deregistered_after_inactivity
//
type ClusterDeregisteredAfterInactivityEvent struct {
    ClusterId strfmt.UUID
}

var ClusterDeregisteredAfterInactivityEventName string = "cluster_deregistered_after_inactivity"

func NewClusterDeregisteredAfterInactivityEvent(
    clusterId strfmt.UUID,
) *ClusterDeregisteredAfterInactivityEvent {
    return &ClusterDeregisteredAfterInactivityEvent{
        ClusterId: clusterId,
    }
}

func SendClusterDeregisteredAfterInactivityEvent(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,) {
    ev := NewClusterDeregisteredAfterInactivityEvent(
        clusterId,
    )
    eventsHandler.SendClusterEvent(ctx, ev)
}

func SendClusterDeregisteredAfterInactivityEventAtTime(
    ctx context.Context,
    eventsHandler events.Sender,
    clusterId strfmt.UUID,
    eventTime time.Time) {
    ev := NewClusterDeregisteredAfterInactivityEvent(
        clusterId,
    )
    eventsHandler.SendClusterEventAtTime(ctx, ev, eventTime)
}

func (e *ClusterDeregisteredAfterInactivityEvent) GetName() string {
    return "cluster_deregistered_after_inactivity"
}

func (e *ClusterDeregisteredAfterInactivityEvent) GetSeverity() string {
    return "info"
}

func (e *ClusterDeregisteredAfterInactivityEvent) GetClusterId() strfmt.UUID {
    return e.ClusterId
}

func (e *ClusterDeregisteredAfterInactivityEvent) format(message *string) string {
    r := strings.NewReplacer(
        "{cluster_id}", fmt.Sprint(e.ClusterId),
    )
    return r.Replace(*message)
}

func (e *ClusterDeregisteredAfterInactivityEvent) FormatMessage() string {
    s := "Cluster is deregistered due to inactivity"
    return e.format(&s)
}

